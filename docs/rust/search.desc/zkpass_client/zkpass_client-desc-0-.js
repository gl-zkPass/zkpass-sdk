searchState.loadedDescShard("zkpass_client", 0, "zkPass Client SDK Library\n <em><strong>Represents a request that contains information needed to </strong></em>…\n <em><strong>Represents a JWKS (JSON Web Key Set) end point.</strong></em> \nUsing KeysetEndpoint as the reference to a public key\n <em><strong>Defines a function for retrieving a public key from a </strong></em>…\n <em><strong>Contains the result of a zkPass query.</strong></em> \n <em><strong>Represents a public key.</strong></em> \nUsing PublicKey as a public key\n <em><strong>Provides alternative ways to represent a public key.</strong></em> \n <em><strong>Defines various errors that come from the zkPass Service.</strong></em> \n <em><strong>The value returned by the <code>generate_zkpass_proof</code> API of </strong></em>…\nThe hash digest of the DVR\nThe unique id of the DVR\nThe unique id of the DVR\nThe title of the DVR\nThe title of the DVR\nThe public key actually used by the zkPass Service to …\nThe public key information used to verify the signature of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<strong>Description</strong>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe url of the end point.\nThe key to locate the public key.\nThe zkPass Query script, which is encoded in JSON string …\nThe version of the zkpass query engine used to create the …\nThe version of the zkpass query method used to create the …\n<code>result</code> is a boolean value for the result of the query\nThe time stamp of the ZkPassProof as created by the zkPass …\nWe allow more than one user data specification in a single …\nThe public key actually used by the zkPass Service to …\n<code>x</code> represents the x parameter of the public key.\n<code>y</code> represents the y parameter of the public key.\nThe Cryptographic data blob which contains the ZK Proof\nThe type of zkvm used to process the DVR\nzkPass supports multiple user data input, that’s why …\n <em><strong>The API key struct which ZkPassClient struct implements</strong></em> \n <em><strong>The main struct which implements all of the traits </strong></em>…\n <em><strong>Defines a function for generating zkPass Proof.</strong></em> \n <em><strong>Defines a callback function for post-ZKP metadata </strong></em>…\n <em><strong>Defines functions for proof verification.</strong></em> \n <em><strong>Defines functions for digital signature and encryption.</strong></em> \nDescription\nDescription\nReturns the argument unchanged.\nReturns the argument unchanged.\n<strong>Description</strong>\n<strong>Description</strong>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescription\n<strong>Description</strong>\nDescription\n<strong>Description</strong>\n<strong>Description</strong>")