var searchIndex = new Map(JSON.parse('[\
["zkpass_client",{"doc":"zkPass Client SDK Library","t":"CCHPPFFPPPPPPFFPKPPPPPPPPPPPFFFPGPPGGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHNNNNNNNNNOOOOOOOHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNOOOOOONOOOONNNNNNNNNHNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOHOOOOOOFFKKKKONNNNNNMNMNNNNNNMNNNMNNNNOMNNNNNNNNMMNNMNOOO","n":["core","interface","package_version","Bool","CustomError","DataVerificationRequest","Entry","ExpiredZkPassProof","FunctionRetrievalError","Int","InvalidPublicKey","InvalidZkVm","JoseError","Jwk","KeysetEndpoint","KeysetEndpoint","KeysetEndpointResolver","MismatchedDvrDigest","MismatchedDvrId","MismatchedDvrTitle","MismatchedDvrVerifyingKey","MismatchedUserDataVerifyingKey","MissingApiKey","MissingKeysetEndpoint","MissingPublicKey","MissingRootDataElementError","MissingZkPassQueryLibrary","NotImplementedError","OutputReader","ProofMethodOutput","PublicKey","PublicKey","PublicKeyOption","QueryEngineError","Str","Val","ZkPassError","ZkPassProof","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","crv","decrypt_jwe_token","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dvr_digest","dvr_id","dvr_id","dvr_title","dvr_title","dvr_verifying_key","dvr_verifying_key","encrypt_data_to_jwe_token","enumerate","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","find","find_bool","find_i64","find_string","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_json","get_key","get_sha256_digest","into","into","into","into","into","into","into","into","into","into","into","jku","jwt","key","kid","kid","kty","pretty_print","query","query_engine_ver","query_method_ver","result","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sign_data_to_jws_token","source","time_stamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_pem","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_data_url","user_data_verifying_key","user_data_verifying_key","val","verify_jws_token","x","x","y","y","zkproof","zkvm","ZkPassApiKey","ZkPassClient","ZkPassProofGenerator","ZkPassProofMetadataValidator","ZkPassProofVerifier","ZkPassUtility","api_key","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decrypt_jwe_token","decrypt_jwe_token","encrypt_data_to_jwe_token","encrypt_data_to_jwe_token","fetch_public_keys","fmt","fmt","from","from","generate_zkpass_proof","generate_zkpass_proof","get_api_token","get_api_token","get_query_engine_version_info","get_query_engine_version_info","into","into","new","secret_api_key","sign_data_to_jws_token","sign_data_to_jws_token","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","validate","verify_jws_token","verify_jws_token","verify_zkpass_proof","verify_zkpass_proof_internal","verify_zkpass_proof_internal","zkpass_api_key","zkpass_service_url","zkvm"],"q":[[0,"zkpass_client"],[3,"zkpass_client::core"],[227,"zkpass_client::interface"],[277,"alloc::string"],[278,"core::result"],[279,"serde::de"],[280,"serde_json::value"],[281,"alloc::vec"],[282,"core::option"],[283,"core::fmt"],[284,"core::fmt"],[285,"zkpass_query_types"],[286,"core::future::future"],[287,"alloc::boxed"],[288,"core::pin"],[289,"serde::ser"],[290,"core::error"],[291,"core::any"]],"d":["","","","",""," <em><strong>Represents a request that contains information needed to </strong></em>…","","","","","","","",""," <em><strong>Represents a JWKS (JSON Web Key Set) end point.</strong></em> ","Using KeysetEndpoint as the reference to a public key"," <em><strong>Defines a function for retrieving a public key from a </strong></em>…","","","","","","","","","","","",""," <em><strong>Contains the result of a zkPass query.</strong></em> "," <em><strong>Represents a public key.</strong></em> ","Using PublicKey as a public key"," <em><strong>Provides alternative ways to represent a public key.</strong></em> ","","",""," <em><strong>Defines various errors that come from the zkPass Service.</strong></em> "," <em><strong>The value returned by the <code>generate_zkpass_proof</code> API of </strong></em>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The hash digest of the DVR","The unique id of the DVR","The unique id of the DVR","The title of the DVR","The title of the DVR","The public key actually used by the zkPass Service to …","The public key information used to verify the signature of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","<strong>Description</strong>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The url of the end point.","","","The key to locate the public key.","","","","The zkPass Query script, which is encoded in JSON string …","The version of the zkpass query engine used to create the …","The version of the zkpass query method used to create the …","<code>result</code> is a boolean value for the result of the query","","","","","","","","","","","","The time stamp of the ZkPassProof as created by the zkPass …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The url to retrieve the user data referenced by the query.","The public key actually used by the zkPass Service to …","The public key information used to verify the signature of …","","","<code>x</code> represents the x parameter of the public key.","","<code>y</code> represents the y parameter of the public key.","","The Cryptographic data blob which contains the ZK Proof","The type of zkvm used to process the DVR"," <em><strong>The API key struct which ZkPassClient struct implements</strong></em> "," <em><strong>The main struct which implements all of the traits </strong></em>…"," <em><strong>Defines a function for generating zkPass Proof.</strong></em> "," <em><strong>Defines a callback function for post-ZKP metadata </strong></em>…"," <em><strong>Defines functions for proof verification.</strong></em> "," <em><strong>Defines functions for digital signature and encryption.</strong></em> ","","","","","","","","Description","","Description","","","","","Returns the argument unchanged.","Returns the argument unchanged.","<strong>Description</strong>","","","","<strong>Description</strong>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Description","","","","","","","","","<strong>Description</strong>","Description","","<strong>Description</strong>","<strong>Description</strong>","","","",""],"i":[0,0,0,9,14,0,0,14,14,9,14,14,14,0,0,7,0,14,14,14,14,14,14,14,14,14,14,14,0,0,0,7,0,14,9,0,0,0,2,2,14,5,6,7,8,17,9,10,3,11,2,14,5,6,7,8,17,9,10,3,11,5,6,7,8,9,10,3,11,5,6,7,8,9,10,3,11,11,0,5,6,7,8,17,9,10,3,11,17,17,10,17,10,17,10,0,2,5,6,7,8,9,10,8,8,8,9,9,9,2,2,2,2,14,14,5,6,7,8,17,9,10,3,11,2,14,14,5,6,7,8,17,9,10,3,11,2,28,10,2,14,5,6,7,8,17,9,10,3,11,6,11,3,6,11,11,2,10,10,10,8,5,6,7,8,17,9,10,3,11,0,14,17,5,6,7,8,9,10,3,11,5,14,2,14,5,6,7,8,17,9,10,3,11,2,14,5,6,7,8,17,9,10,3,11,2,14,5,6,7,8,17,9,10,3,11,10,17,10,3,0,5,11,5,11,17,10,0,0,0,0,0,0,35,37,35,37,35,35,35,36,37,36,37,37,37,35,37,35,38,37,37,35,39,37,37,35,37,35,36,37,35,37,35,37,35,37,35,40,36,37,39,39,37,37,37,37],"f":"``{{}b}```````````````````````````````````{{df}h}{ce{}{}}000000000000000000000{jj}{ll}{nn}{A`A`}{AbAb}{AdAd}{ff}{AfAf}{{ce}h{}{}}0000000`{{bb}{{An{{Aj{AhAh}}Al}}}}{c{{An{j}}}B`}{c{{An{l}}}B`}{c{{An{n}}}B`}{c{{An{A`}}}B`}{c{{An{Bb}}}B`}{c{{An{Ab}}}B`}{c{{An{Ad}}}B`}{c{{An{f}}}B`}{c{{An{Af}}}B`}```````{{bBd}{{An{AhAl}}}}{d{{Bf{f}}}}{{jj}Bh}{{ll}Bh}{{nn}Bh}{{A`A`}Bh}{{AbAb}Bh}{{AdAd}Bh}{{ce}Bh{}{}}00000{{db}{{Bj{Ab}}}}{{db}{{Bj{Bh}}}}{{db}{{Bj{Bl}}}}{{db}{{Bj{Ah}}}}{{AlBn}{{An{hC`}}}}0{{jBn}{{An{hC`}}}}{{lBn}{{An{hC`}}}}{{nBn}{{An{hC`}}}}{{A`Bn}Cb}{{BbBn}{{An{hC`}}}}{{AbBn}{{An{hC`}}}}{{AdBn}{{An{hC`}}}}{{fBn}{{An{hC`}}}}{{AfBn}{{An{hC`}}}}{cc{}}{CdAl}1111111111{b{{An{dCf}}}}{{Chbb}{{Cn{{Cl{Cj}}}}}}{AdAh}{ce{}{}}0000000000``````{bAh}````{{jc}AnD`}{{lc}AnD`}{{nc}AnD`}{{A`c}AnD`}{{Bbc}AnD`}{{Abc}AnD`}{{Adc}AnD`}{{fc}AnD`}{{Afc}AnD`}{{bBd{Bj{l}}}{{An{AhAl}}}}{Al{{Bj{Db}}}}`<<<<<<<<{jAh}{cAh{}}{c{{An{e}}}{}{}}000000000000000000000{cDd{}}0000000000````{{bb}{{An{{Aj{BdAh}}Al}}}}`````````````{ce{}{}}000{DfDf}{{ce}h{}{}}{{Dhbb}{{An{{Aj{AhAh}}Al}}}}{{Djbb}{{An{{Aj{AhAh}}Al}}}}{{DhbBd}{{An{AhAl}}}}{{DjbBd}{{An{AhAl}}}}{{Djb}{{An{AfAl}}}}{{DjBn}Cb}{{DfBn}Cb}{cc{}}0{{Dlbb}{{Cn{{Cl{Cj}}}}}}{{Djbb}{{Cn{{Cl{Cj}}}}}}{Dj{{An{AhAl}}}}{DfAh}{Dn{{An{{Aj{AhAh}}Al}}}}{Dj{{An{{Aj{AhAh}}Al}}}}{ce{}{}}0{{b{Bj{Df}}b}Dj}`{{DhbBd{Bj{l}}}{{An{AhAl}}}}{{DjbBd{Bj{l}}}{{An{AhAl}}}}3{c{{An{e}}}{}{}}000{cDd{}}0{{E`b}{{An{{Aj{AdjEb}}Al}}}}{{Dhbb}{{An{{Aj{BdAh}}Al}}}}{{Djbb}{{An{{Aj{BdAh}}Al}}}}{{Dnb{Cl{E`}}}{{Cn{{Cl{Cj}}}}}}{{Dnb}{{Cn{{Cl{Cj}}}}}}{{Djb}{{Cn{{Cl{Cj}}}}}}```","c":[],"p":[[1,"str"],[5,"OutputReader",3],[5,"Entry",3],[1,"unit"],[5,"PublicKey",3],[5,"KeysetEndpoint",3],[6,"PublicKeyOption",3],[5,"ProofMethodOutput",3],[6,"Val",3],[5,"DataVerificationRequest",3],[5,"Jwk",3],[5,"String",277],[1,"tuple"],[6,"ZkPassError",3],[6,"Result",278],[10,"Deserializer",279],[5,"ZkPassProof",3],[6,"Value",280],[5,"Vec",281],[1,"bool"],[6,"Option",282],[1,"i64"],[5,"Formatter",283],[5,"Error",283],[8,"Result",283],[6,"JoseError",284],[6,"OutputReaderError",285],[10,"KeysetEndpointResolver",3],[10,"Future",286],[5,"Box",287],[5,"Pin",288],[10,"Serializer",289],[10,"Error",290],[5,"TypeId",291],[5,"ZkPassApiKey",227],[10,"ZkPassUtility",227],[5,"ZkPassClient",227],[10,"ZkPassProofGenerator",227],[10,"ZkPassProofVerifier",227],[10,"ZkPassProofMetadataValidator",227],[1,"u64"]],"b":[[113,"impl-Debug-for-ZkPassError"],[114,"impl-Display-for-ZkPassError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
